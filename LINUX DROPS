LINUX COMMANDS

SECTION 1
whoami
hostname --help to show more options eg to make all options fits into screen use | less eg hostname -- help | less
another example is hostname --all-ip-addresses to get all associated ip address with the host
date - allows you to view the current date and you can even set the date
uname - gives info about the kernel, build version etc
passwd -  allows you to manage passwords
touch -  allows you to verify if you can write to a file. you can also create an empty file with touch
last
 ***if you get an error on could not get lock /var/lib/dpkg/lock what to do is to check process attached to that part then remove the,
do it by checking, sudo lsof /var/lib/dpkg/lock then kill processes by doing kill -9 <process-id>
check also lsof /var/lib/apt/lists/lock and also /var/cache/apt/archives/lock then remove the paths sudo rm and the paths

** su is for switch user. e.g su alone or su <username>
--passwd is used to change passwrds for users eg passwd root
--cd alone takes you to the home directory
**** last alone shows you the last login that has happened on the system
*** wc is owrd count used as | wc -l path-here  you can also do ls | wc -l path-here
ls -l for a directory is to list rights and oermissions of the directory
sudo useradd -m [user} is to add user with directory path
man -k user | grep {number}, man useradd
********* man -k (input) allows you to get help on any command
**man is used to get help about a command. eg man hostname
**other ways of getting help is using [command --help or man [command]]
**apropos --help give more help info about command usage
** man -k hostname as example

ctrl Z to send something to the backgroung
fg command to bring it back to front
sudo !! (repeats the last command but adds sudo to it)

pushd /directory and pod to return to the previous directory
ctrl R to search in previouslt run command

configuring history to show more information, use=  HISTTIMEFORMAT="%Y-%M-%D %T "
put this HISTTIMEFORMAT="%Y-%M-%D %T " in ~./bashrc doc to make it persistent

****a space before a command in bash automatically hides the command from the history ***

****cmatrix to give you matrix feel. ***try it**8
f11 for full screen
truncate -s 0 name-of-file

mount | column -t  






SECTION 2

***bin directory is for binaries
***var directory house logs
** etc is for configuration files, most are text files
ls -la for a directory is to list rights and oermissions of the directory including hidden files (man ls)
** usr directory is like a program files in windows
**cat
**opt is for application install path
**proc is for learning info about your OS
***srv is for hardware information
****NB If a file starts with . linux considers it a hidden file
** use ls -l to list out files instead of using cd /path ; ls
******* ls -help for more ls options -a or -A, -d, -R to list out even sub dir, 
******lsof is used to check list of running files in a directory
**** note when copying . is a current directory and also when copying, no need to add the / at the beginning, behind is fine
** -R is recussive when added to cp command, youc an copy when not in the folder itself eg cp -R []
**you can remove multiple files by using rm [begining of the file name]*
** rm -rf * removes everything in the current folder  -r is for remove with content -f is for force
** pwd is to paste working directory
cd - or cd .. takes you back to the last directory you were in. cd - will even list the directory like pwd
cd / takes you to the home directory. the / will begin and can even navigate from the beginning
** .. is a previous path and . is a current path. you can play around copying 
** mv can be used to move file and to rename file when moving to the same location
* is a wildcard in linux, to use and excape the capability, add \*
to view previously used commands, history. then use ![number] to pick the one to use
**** ln is used to link files in linux. syntax ln [file path] [destination link]. for symbolic links, just add -s to ln. eg ln -s [] []
***symbolic links which is (ln -s) can be attached to folders while ordinary (ln) can be for files alone
**finding of files goes by find / [parameter e.g -user, -size] [second argument e.g oajani, +100M]
*** grep --help {check it out to see more options on how to define grep}
** find / -user chuks -exec cp {} [directory path] \; ***************** (\; is used to close a exec command) **********
***find / -type f -size +100M means find type of f-files with more that 100mb+ in size  (-type f means no directories, only files)
*** find /etc -exec grep -l oajani {} \; -exec cp {} /lekan/ \; 2>/dev/null   (2>/dev/null is to omit/redirect errors)
***OR grep -ir "pattern being looked for in a file" path-to-look
*** find /etc -name '*' -type f | xargs grep "127.0.0.1" ---this command looks for any name of any file containing 127.0.0.1
*** tar is used to work with tar archieves. e.g tar (cvf is to compress, xvf is to extract, tvf is to show contents of a tar file), -C is to extract to another dir
**** for tar c-create, z-compress, v-verbos, f-filename, x-xtract, t-show content.
**** -- * is a wild card. eg ls -l /etc* lists all directories and files in etc
*****to copy files in range, you can do cp path/[range-range]*
*** nano and vim are editors.   **vimtutor for tutorial on vim 
*** while in man page or any long page, use /[text] to search for anything on the page. g takes you to top and G takes you to bottom of page
*********NB ! is to force on vim command page
*** head and tail to view top and bottom entry of file. eg (cat textfile | grep head -n 5 shows the top 5 entry of file testfile)
**both head and tail can be combined when |
******* when using head and tail to monitor a log file, -f can be used to keep the page in refresh mode. eg (tail -f /var/log/message)
**grep -i -to ignore cases, -v to exclude a output. 
**** regular expressions which applies to grep too are: ^beginning of the line, $end of the line, \<beginning of a word, \> end of a word
\A start of a file, \Z end of a file, 
******sed is used to print out lines. e.g sed -n 5p [path]
*** sed can be used to insert into a file. eg sed -i s/orig-file/subtitute/g [name of file] --- -i means interactive, s-subtitute, g-global
******** sort sorts output. -n can be used to arrange it too
*** to search on a line by line, use grep '^word$' [path being search. this matches the word alone on a line by line bases but grep '^word' and -v picks all line

***lesson5
su alone takes you to root user directory, sudo su takes you to root directory
***from the root, you can login to any user account using su - username
***useradd to add users and passwd user to set password, usermod to add users to group and other stuffs
***su - user switches you to another user
** add user with useradd -s /bin/bash -d /home/user/ -m -G groupname username   .-s is for login shell, -d is for home, -m creates home, -G is for group
******who am i ******
**who command shows you users that are currently logged on to the system
******echo text > filename.(extension) will write to the file and create it
spinning up a web server with python -m SimpleHTTPServer (port). the root directory will be where this command was launched from
***start the webb server is with service start apache2


htop or top
ps alone shows processe and users
ps -u -u is for user
then ps -u user-here | grep the process

ctrl z pause ctrl c stops
jobs shows you process in the background
bg number-on-the-job to bring it back
fg same nunber above brings process to foreground
pkil -p name-of-process eg ping will kill all ping process still running






to scan for new drive on linux
for host in /sys/class/scsi_host/*; do echo "- - -" | sudo tee $host/scan; ls /dev/sd* ; done
check drives with lsblk, fdisk -l and also do df -h

Check the other linux training doc file

cat file.txt.0* > allfiles.txt  (this will add all files starting with file.txt.0 and the * is to pick all and add them together into allfiles.txt
**lsblk to list the blocks storage on a device
**lscpu
**lsmem --summary or free -m
**lshw

***/var is for log storage

.debian and .rpm(redhat package manager)
.deb are ubuntu, debian and linux mint distro based while the .rpm are rhel, centos and fedora distro based system.
Package managers help handles package and dependency installations
for .deb are dpkg, apt, apt-get
for rpm are rpm, yum, dnf
to install rpm -ivh (package name)
to uninstall rpm -e (package)
to upgrade package rpm -Uvh (package)
to verify package rpm -Vf (package)

*yum install (file)
*yum update to update dependencies
**rpm [option] package type to check packages while yum install to install package.
*sudo yum repolist to check the amount of repolist configured on a system
dpkg (debian pakage manager) which is lower level
dpkg -l package (to list package
to install dpkg -i to install package
-s is to check status
-p <path to package> to print all available package

apt-get is higher level compared to dpkg
apt update is to refresh the OS
and upgrade to install available upgrade on all package
apt install
apt remove
apt list | grep package
apt better than apt-get
apt install, apt search package

du (disk usage) to list how much a file is occupying on a disk
du -sh or ls -lh to round up the size
df -h to check the file system storage usage

***tar (tape archive)
tar   (-c create, -d delete, -r append, -t list, -u update, -x extract, -f file and -v verbose, -z compress)
ls > file.txt to redirect output while >> will append
tee is also used to redirect output to a file. e.g ps -ef | grep ssh | tee newfile.txt

linux history is located in ~/.bash_history  .  history -c to clear history from memory then history -w to clear it from disk. or just manually go there.
wc ~/.bash_history to count the number of lines in history and history -w to write to history

dpkg -l to check for all available installed packages
***************yum list installed to check packages installed on rpm machines
--Setting a variable e.g NAME=DETAILS THEN you print by echo $NAME

CTRL-l clear screen, ctrl-u wipe current command line, ctrl-e move to the end of a line, ctrl-d exit

***ALIAS TO SHOW THE ALIAS ON the system. to add alias use alias lll="ls -la"
***with env, you see all variables even history variable is there
cat etc/passwd for user details and cat etc/group for all group details and etc/shadow stores the hashed password of all users
id username to see details about a user and associated group
etc/sudoers file contains the type of permissions users have. eg. grep lekan /etc/sudoers
****** you can use grep on files to hihlight matches e.g grep lekan /folder/file
**File permissions
d- directory, - implies regular file, c- chanracter device, |- link, s- socket file, p- pipe, b- block device.

rwx r-4, w-2, x-1 =7
chown to change the ownership of files or folder. syntax is chown owner:group file or folder
**Always remember the recursive command -R and the * command for all

you can use SCP to copy via ssh from one server to another syntax is
scp path-on-local-system hostname/ip-address:/destination-path
scp -i pk_dsa.pem linuxhintsignal kali@192.168.1.100: (this will do it with key-pair)

IPTABLES LOCAL FIREWALL
SYNTAX: iptables -A INPUT -p tcp -s source-ip --dport port -j ACCEPT
**Checking the current iptables is (iptables -L)
-A - Add rule, -p = protocol, -s = source, -d = destination, --dport = destination port, -j = action (ACCEPT OR DROP), -I = Insert rule from the top
****NB- Any indicator not specified will be taken as ANYWHERE.
**to delete a rule, iptables -D OUTPUT/INPUT 5 (5 means the rule number)
EXAMPLES are
iptables -I INPUT -p tcp -s 172.16.238.10 --dport 5432 -j ACCEPT
iptables -A INPUT -p tcp -j DROP

sudo firewall-cmd --add-service=http --permanent
sudo firewall-cmd --add-service=https --permanent
sudo firewall-cmd --reload

iptables-save > /etc/sysconfig/iptables

iptables-restore < /etc/sysconfig/iptables

firewalld
 606  firewall-cmd --zone=public --add-port=5432/tcp --permanent
 
 
CRONJOB
Do not use sudo with cronjob else it will associate the task to the root account
synta is crontab -e user (user is the user which the crontab willbe associated with)
syntax when in the vi editor for the cronjob is * * * * * from the first to the last minute, hour, day, month and weekday if it is needed to be specified. the ones you are not using can be left at *. * means any value
**to run a job every 10 minute, all values will be set to * except for the first which will be */10.
you can also use the */ value for other options as well. eg every 2 hours will be the second value */2

**crontab -l will show the list of all cronjobs
**to check if the job ran successfully, do ***tail /var/log/syslog**

****sudo dpkg --list to show all installed packages on deb while sudo yum list to show on rpm

host file etc/host
dns server set etc/resolv.conf 
to set host file or dns server switch, etc/nsswitch then switch dns for files

**DNS works by when a request is made to www.google.com, the pc checks the host file for a way to the address or the cache, then checks the dns server which is the root dns, the root dns then consults the .com dns server which will in turn finds a server which can serve the address.
in the resolve file, you can add search domain so you can reach subdomains only wothout adding the full domain path

A record is mapping name to ip address
CNAME is mapping name to name
nslookup or dig can help you prob and ressolve addresses
********Find and replace in linux
lsof finds running app with their ports eg lsof -i:80 finds app runing on port 80.
** netstat -an | grep 80 | grep -i LISTEN  check the example
*** ip link - to show interfaces and their details and their status
**ifconfig or ip addr ** is to check the interface details and ip addresses attached
**ip route shows you the routing table

**ip addr add x.x.x.x/x dev eth0 (eth0 is the interface)
**ip route add x.x.x.x/x via x.x.x.x
*** use route command to check the routing table
*********Use etc/networks/interfaces file to make the changes above persistent
* To bring up an interface, use **ip link set dev eth0 up**

STORAGE
lsblk shows the blocks in a system and fdisk -l shows more information.

*partitions types include primary, extended and logical partition
MBR partition can only use 4 partition disk (master boot record) if you want more than that then you use GPT.
GPT (GUID partition table) can have unlimited partition disk. it is always preferred
**blkid /path to check the id and type of file system used
**gdisk will help begin partition process. gdisk /dev/sd* the unallocated disk/ device path. then follow the instructions
Once done, use lsblk or fdisk -l to check.

**then mkfs.ext4 /dev/sd* to make the file system after partition
**mkdir /mnt/ext4; the directory that will be associated 
**mount /dev/sd* /mnt/ext4 and that mounts the file system with the directory.
then check the file system df -hP
**then to make it persisten after reboot, add the directory to the fstab directory in etc


Storages (Enterprise grade)
-DAS = Direct attached storage
-NAS = Network attached storage
-SAN = Storage area network (provides high speed storage)

*DAS- Direct attached storage (fast and reliable,affordable,dedicated single host and ideal for small business)
*NAS- Storage are located apart from the host and it is through the network. like an allocated NFS allocated to different hosts which is accessible via network by several host. it is like a network share.
*SAN -provides block storage fro enterprise grade. can be used with vmware and the likes
*NFS drive paths can be made avalible to devices over the network and mounted on their devices
**A file called /etc/exports is created on the NFS server to specify which hosts can access the partition
enter the command to etc/exports, /paths ip ip to specify access
exportfs -a on the nfs server to trigger share to devices
exportfs -o ip:path is a manual way of exporting a directory

on the other devices, use mount ip:/path /mnt/.. to mount on devices

LVM - Logical volume manager (grouping of logical volumes) helps you manage multiple volumes so the volumes can be resized dynamically as long as there is space.
apt-get install lvm2
pvcreate /dev/sdb
vgcreate test /dev/sdb
pvdisplay or vgdisplay

**To turn a script into a service, place the script in an absolute path /usr/bin/script.sh
then create a service in etc/systemd/system/script.service then input
[Unit]
Description="add description"
Documentation="add documentation
After=dependable.service #after means it should start aftre another service
[Service]
execstart= #since its a script you start with# /bin/bash /usr/bin/script.sh
User=user-to-run-as
Restart=on-failure
RestartSec=10
[install] to set it to persistence incase of reboot
wantedBy

****systemctl deamon-reload will help reload the overall service for changes

**Systemd tools are systemctl and journalctl
systemctl reload refreshes a service without affecting functionality
***systemctl edit service --full ##is to write into the service
systemctl list-units --all to list all the services

**journalctl is for troubleshooting systemd service issues
journalctl -u service to show the error with a service
journalctl alone just prints errors from the current boot
check out journalctl -b

netstat -natulp | grep service-name | grep LISTEN
**** grep -ir "pattern in a file being find" path-to-look (can be used to find a sentence in a file)
systemctl cat or show name.service


************************SHELL SCRIPTING********************
you can always define a variable for repetitive task
*when defining a variable, use the syntax, variable_defination=value
*variable name cannot use special characters like -. use like _ underscore.
-merging variable to something else, the variable should be enclosed in {} eg file = tols.txt  cp $file ${file}.bck
--command line argument helps you assign values from outside a script
e.g test.sh contains:
echo "Username: $1";
echo "Age: $2";
echo "Full Name: $3";

sh userReg-positional-parameter.sh john 25 'John Smith'

arithmetic operation +-*/ 2 + 2. echo $(( 2 + 2)) a++ or a-- increamental and dwcremental
when using expr, use ` to quote the expressions instead of '. and remember to comment out the * with \*

string are placed in square brackets [] e.g [ "string1" = "string2" ]
&& for AND || for OR
[ A ] || [ B ] or [[ A || B ]] means the same

if statement starts with if and ends with fi
e.g if [ ]
    then
    fi

***conditional operatora
[ "ab" = "ab" ] - if string1 is exactly equal to string 2 (true)
[ "ab" != "ab" ] - if string1 is not equal to string 2 (false)
[ 5 -eq 5 ] - if number1 is equal to number2 (true)
[ 5 -ne 5 ] - if number1 is not equal to number2 (false)
[ 6 -gt 5 ] - if number1 is greater than number2 (true)
[ 5 -lt 6 ] - if number1 is less than number2 (true)

[[ string1 = string2 ]] works almost like the one above. examples are
[[ "abc" = *bc* ]] - if abc contains bc (true)
[[ "abc" = ab[cd] ]] or [[ "abd" = ab[cd] ]] - if 3rd character of abc is c or d (true)
[[ "abe" = "ab[cd]" ]] - if 3rd character of abc is c or d (false)
[[ "abc" > "bcd" ]] - if "abc" comes after "bcd" when sorted in alphabetical order (false)
[[ "abc" < "bcd" ]] - if "abc" comes before "bcd" when sorted in alphabetical order (true)


**File operators**
[ -e FILE ] - If file exists
[ -d FILE ] - If file exist and is a directory
[ -s FILE ] - If file exists and has size greater than 0
[ -x FILE ] - If the file is executable
[ -w FILE ] - If the file is writeable

***LOOPS - FOR
syntax is for __ in __
	  do 
	    (statements...)
	   done
for num in 1 2 3 4 5 6
	do ......
OR
for items that a long that wont fit into in ........
specify the items in a file and use the `cat` to specify
e.g for test in `cat file.txt` or **use for test in $(cat file.txt)
for numeric values that will be long, it can be written as
for i in {1...500}
do
 OR
for (( item = 0 ; item <= 100 ; item++)
do

***********EXAMPLES OF FOR LOOPS***********
example 1
for file in $(ls)
do
   echo Line count of $file is $(cat $file | wc -l)
done

example 2
for package in $(cat install-package.txt)
do
    sudo apt-get -y install $package
done

example 3
for server in $(cat servers.txt)
do 
   ssh $server "uptime"
done

try this to see. echo -e " name  \t  email   \t   mobile " or
echo -e "---------"
if its a file, you cat if its folder you ls
expr +,-,/,*

while [a condition]
do
  ...........
done
build a calculator
while true
do
echo "option1 "
echo "option2 "

read -p "enter a number:" number
read -p "enter another number:" number2

Instead of having too many ifs statements, we can use the case statement
** case $choice in
	1) the first option e.g shutdown now
 	  ;;	
	2) restart now
	  ;;
	3) break
	  ;;
	*) continue
	  ;;
   esac

calculating average eg echo answer=$(echo "$sum /2" | bc -l)

exit code helps you understnad the error your code is failing with
you can quickly run $? or echo $? +
after a failed code to see the exit code or set the exit code of a command to return a particular number. by doing exit 1. the code will return exit code 1.

Functions in shell scripts.
example  function function-name() {
		function definition codes to perform
	  }
then you can call the function with function-name parameter-to-be-passed

for the exit code, instead of exit 1, you use return 1 for the function so as to only exit the particular function and not the whole program.

syntax
function add() {
	sum=$(( $1 + $2))
	echo $sum
}

result=$(add 4 6)
echo "the result is $result"

*********use shellcheck to check your codes
yum install shellcheck
or apt-get install shellcheck

***then do shellcheck your-script-here to check for errors


******echo -e to echo a color code on anything

sudo yum install -y firewalld (-y will help suppress the installation and ensure it doesnt prompt for anything)

**running a command from another prompt like from sql or db prompt, you need to push all the command needed into a file and then run it via that prompt e.g
cat > setup-db.sql <<-EOF
  CREATE DATABASE ecomdb;
  CREATE USER 'ecomuser'@'localhost' IDENTIFIED BY 'ecompassword';
  EOF
****the essence of the EOF is to let the cat command run without someone having to press ctrl-c
sudo mysql < setup-db.sql

awk -F: '{ print $1 }' /etc/passwd or cut -d: f1 /etc/passwd will help you break out only the username fromt he passwd file

******** if -z will always mean if the variable is not it *********

************Do a script to check agent service if present on cimtrak then check if the service is running, if not it should start the service else it should proceed to install cimtrak on the server****************

echo "Hello World" > /var/www/html/index.html to paste into the web server address


****to search for a configuration file for an app,
rpm -qc name-of-app

sudo auditbeat test output or test config

***you can redirect to /dev/null and the output will not be anywhere example is yum install vim -y > /dev/null

to redirect standard error to a file, you add 2 infront eg  yum install vimm -y 2>> /dev/null or redirect to a file of your choice  OR use
free -m &>> /path-of-your-choice   the & can also be used in place of the 2 to redirect standard error and output to a file

last command is to show who logged in to a server last

lsof can also check the activity of a user eg lsof -u user-name-here

userdel and groupdel are both used to delete a user and their respective group. eg
userdel -r /user-hom-directory  to delete both the user and the home directory

groupdel name-of-group  to delete a user group

id user-name to check the properties of a user

visudo to open the sudoers file

rpm -qa | grep the-name-of-the-package-you-want-to-check
rpm --help to find out more

yum install package-name
yum remove package-name
yum reinstall package-name
yum clean all, yum repolist

tree directory-path  

killing multiple process, you can capture them with awk and pass it as an argument xargs to kill, example below

ps -aux | grep httpd | grep -v 'grep' | awk '{print $2}' | xargs kill -9

free -m | grep Mem | awk '{print $4}'

tar -czvf name-of-archive.tar.gz path-to-archive
-c is create, z is zip(gunzip), v is verbose , f is file and x is for extract
you can also use zip command but you need to install zip and unzip package

apt install, apt remove, apt upgrade, apt purge is clean uninstall for package

useful; touch myfile{1..5}.sh


# systemctl start firewalld
# systemctl enable firewalld
# firewall-cmd --get-active-zones
# firewall-cmd --zone=public --add-port=3306/tcp --permanent
# firewall-cmd --reload
# systemctl restart mariadb

netstat -antp
ss | -tunlp
netstat -punta | grep LISTEN
both above are to see the open ports on a machine
nmap usage on linux

dig will also do a DNS lookup on a system as well as nslookup which is also useful
route -n will show gateways on the system ordinary route works too


 ssh-keygen.exe to cretae keys for github
 



